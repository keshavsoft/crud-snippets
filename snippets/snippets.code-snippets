{
    "HTML DOM by Id": {
		"scope": "javascript,typescript",
		"prefix": "KS-Log to Console",
		"body": [
			"console.log('$1',$1);"
		],
		"description": "Log output to console"
	},
	"Mock document.getElementById": {
		"scope": "javascript,typescript",
		"prefix": "KMockDocumentGetElementById",
		"body": [
			" let jVarLocal$1 = document.getElementById('$1');"
		],
		"description": "Log output to console"
	},
	"Mock Return Dom innerHTML": {
		"scope": "javascript,typescript",
		"prefix": "KS-RetDomInnerHTML",
		"body": [
			"let LocalFuncForjVarLocal$1 = () => {",
			"\tlet jVarLocal$1 = document.getElementById('jVarLocal$1');",
			"",
			"\tif (jVarLocal$1 === null === false) {",
			"\treturn jVarLocal.innerHTML;",
			"\t};",
			"};"
		],
		"description": "Log output to console"
	},
	"One Liners for Collection to Array": {
		"scope": "javascript,typescript",
		"prefix": "KSOL Collection to Array",
		"body": [
			"\tlet LocalReturnArray = $1.map((element) => element.$2);"
		],
		"description": "One liner to convert the collection to array of strings needed from the column selected."
	},
	"To Dom Input Value": {
		"scope": "javascript,typescript",
		"prefix": "KS-AssignToDomInputValue",
		"body": [
			"let jFLocalToInput$1 = (inValue) => {",
			"	let jVarLocalHtmlId = '$1';",
			"   let jVarLocal$1 = document.getElementById(jVarLocalHtmlId);",
			"   ",
			"   if (jVarLocal$1 === null === false) {",
			"      jVarLocal$1.value = inValue;",
			"   };",
			"};"
		],
		"description": "insert the given value to the dom value from id."
	},
	"To Dom Input Value": {
		"scope": "javascript,typescript",
		"prefix": "KS-ImportJson",
		"body": [
			"import countryTable from './data/countries.json' assert {type: 'json'};"
		],
		"description": "single liner for import of json with assert"
	},
	"Get Value from Dom": {
		"scope": "javascript,typescript",
		"prefix": "KS-GetDomValue",
		"body": [
			"let LocalFuncForjVarLocal$1 = () => {",
			"\tlet jVarLocal$1 = document.getElementById('jVarLocal$1');",
			"",
			"\tif (jVarLocal$1 === null === false) {",
			"\treturn jVarLocal$1.value.trim();",
			"\t};",
			"};"
		],
		"description": "Log output to console"
	}
}